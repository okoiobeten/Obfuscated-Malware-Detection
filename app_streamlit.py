import streamlit as st
import pickle
import pandas as pd
from fpdf import FPDF
import os

# Load the trained Decision Tree model
model = pickle.load(open("decision_tree_model1.pkl", "rb"))

def create_pdf(data, predictions):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=6)
    pdf.cell(200, 5, "Malware Detection Report", ln=True, align='C')
    
    # Define cell width based on the number of columns
    cell_width = 190 / (len(data.columns) + 1)  # +1 for the "Prediction" column
    
    # Column headers
    for column in data.columns:
        pdf.cell(cell_width, 5, column[:15], 1)  # Limiting the column name to 15 characters
    pdf.cell(cell_width, 5, "Prediction", 1)
    pdf.ln()
    
    # Data
    for i in range(len(data)):
        for value in data.iloc[i]:
            pdf.cell(cell_width, 5, str(value), 1)
        if predictions[i] == "Malware":
            pdf.set_text_color(255, 0, 0)
        else:
            pdf.set_text_color(0, 128, 0)
        pdf.cell(cell_width, 5, predictions[i], 1)
        pdf.set_text_color(0, 0, 0)
        pdf.ln()

    pdf_file_path = "malware_detection_report.pdf"
    pdf.output(pdf_file_path)
    return pdf_file_path

def main():
        
    st.title("Malware Detection App")
    
    uploaded_file = st.file_uploader("Choose a CSV file", type="csv")
    
    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        
        # Ensure the CSV contains the expected columns in the correct order
        expected_columns = ['svcscan.nservices', 'svcscan.shared_process_services',
                            'dlllist.avg_dlls_per_proc', 'svcscan.kernel_drivers',
                            'handles.avg_handles_per_proc', 'pslist.avg_handlers',
                            'handles.nmutant', 'handles.nevent', 'handles.nsection', 'handles.nkey',
                            'handles.nhandles', 'dlllist.ndlls', 'handles.nsemaphore',
                            'pslist.avg_threads', 'handles.ntimer']
        
        if all([col in data.columns for col in expected_columns]):
            predictions = model.predict(data)
            
            # Generate PDF
            pdf_file_path = create_pdf(data, predictions)
            
            with open(pdf_file_path, 'rb') as f:
                btn = st.download_button(
                    label="Download Predictions PDF",
                    data=f,
                    file_name="malware_detection_report.pdf",
                    mime="application/pdf"
                )
            
            # Optional: Remove the generated PDF if you don't want to keep it
            os.remove(pdf_file_path)

        else:
            st.write("Error: The uploaded CSV doesn't have the expected columns.")
    
if __name__ == '__main__':
    main()
